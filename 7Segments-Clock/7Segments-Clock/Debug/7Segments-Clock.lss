
7Segments-Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d5  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 38       	cpi	r26, 0x8C	; 140
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  8e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <WriteDisplays>:
 *
 ************************************************/
void WriteDisplays(int digit, short int displayNum) {
	int pin = 0;
	
	if (displayNum == 0){							//verifica o display a ser escrito
  96:	61 15       	cp	r22, r1
  98:	71 05       	cpc	r23, r1
  9a:	31 f4       	brne	.+12     	; 0xa8 <WriteDisplays+0x12>
		PORTD |= (0<<PD0);
  9c:	2b b1       	in	r18, 0x0b	; 11
  9e:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (1<<PD1);
  a0:	59 9a       	sbi	0x0b, 1	; 11
		PORTD |= (1<<PD2);
  a2:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |= (1<<PD3);
  a4:	5b 9a       	sbi	0x0b, 3	; 11
  a6:	3e c0       	rjmp	.+124    	; 0x124 <WriteDisplays+0x8e>
	}
	else if (displayNum == 1){
  a8:	61 30       	cpi	r22, 0x01	; 1
  aa:	71 05       	cpc	r23, r1
  ac:	31 f4       	brne	.+12     	; 0xba <WriteDisplays+0x24>
		PORTD |= (1<<PD0);
  ae:	58 9a       	sbi	0x0b, 0	; 11
		PORTD |= (0<<PD1);
  b0:	2b b1       	in	r18, 0x0b	; 11
  b2:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (1<<PD2);
  b4:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |= (1<<PD3);
  b6:	5b 9a       	sbi	0x0b, 3	; 11
  b8:	35 c0       	rjmp	.+106    	; 0x124 <WriteDisplays+0x8e>
	}
	else if (displayNum == 2){
  ba:	62 30       	cpi	r22, 0x02	; 2
  bc:	71 05       	cpc	r23, r1
  be:	31 f4       	brne	.+12     	; 0xcc <WriteDisplays+0x36>
		PORTD |= (1<<PD0);
  c0:	58 9a       	sbi	0x0b, 0	; 11
		PORTD |= (1<<PD1);
  c2:	59 9a       	sbi	0x0b, 1	; 11
		PORTD |= (0<<PD2);
  c4:	2b b1       	in	r18, 0x0b	; 11
  c6:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (1<<PD3);
  c8:	5b 9a       	sbi	0x0b, 3	; 11
  ca:	2c c0       	rjmp	.+88     	; 0x124 <WriteDisplays+0x8e>
	}

	else if (displayNum == 3){
  cc:	63 30       	cpi	r22, 0x03	; 3
  ce:	71 05       	cpc	r23, r1
  d0:	49 f5       	brne	.+82     	; 0x124 <WriteDisplays+0x8e>
		PORTD |= (1<<PD0);
  d2:	58 9a       	sbi	0x0b, 0	; 11
		PORTD |= (1<<PD1);
  d4:	59 9a       	sbi	0x0b, 1	; 11
		PORTD |= (1<<PD2);
  d6:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |= (0<<PD3);
  d8:	2b b1       	in	r18, 0x0b	; 11
  da:	2b b9       	out	0x0b, r18	; 11
  dc:	23 c0       	rjmp	.+70     	; 0x124 <WriteDisplays+0x8e>
	}
		
	for (int segCount = 0; segCount < 7; ++segCount){			//escreve no display o digito solicitado
		if (pin > 6)											//necessario verificar o pino ate a posicao 6 pois o ATMEGA328 nao possui 1 byte
  de:	27 30       	cpi	r18, 0x07	; 7
  e0:	31 05       	cpc	r19, r1
  e2:	64 f0       	brlt	.+24     	; 0xfc <WriteDisplays+0x66>
			PORTB |= (seven_seg_digits[digit][segCount]<<pin);	//completamente acessivel. 
  e4:	45 b1       	in	r20, 0x05	; 5
  e6:	80 81       	ld	r24, Z
  e8:	91 81       	ldd	r25, Z+1	; 0x01
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <WriteDisplays+0x5c>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <WriteDisplays+0x58>
  f6:	84 2b       	or	r24, r20
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	0d c0       	rjmp	.+26     	; 0x116 <WriteDisplays+0x80>
		else
			PORTD |= (seven_seg_digits[digit][segCount]<<5);
  fc:	4b b1       	in	r20, 0x0b	; 11
  fe:	80 81       	ld	r24, Z
 100:	91 81       	ldd	r25, Z+1	; 0x01
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	82 95       	swap	r24
 108:	92 95       	swap	r25
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	98 27       	eor	r25, r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	98 27       	eor	r25, r24
 112:	84 2b       	or	r24, r20
 114:	8b b9       	out	0x0b, r24	; 11
		++pin;
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	32 96       	adiw	r30, 0x02	; 2
		PORTD |= (1<<PD1);
		PORTD |= (1<<PD2);
		PORTD |= (0<<PD3);
	}
		
	for (int segCount = 0; segCount < 7; ++segCount){			//escreve no display o digito solicitado
 11c:	27 30       	cpi	r18, 0x07	; 7
 11e:	31 05       	cpc	r19, r1
 120:	f1 f6       	brne	.-68     	; 0xde <WriteDisplays+0x48>
 122:	08 95       	ret
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	fc 01       	movw	r30, r24
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e8 1b       	sub	r30, r24
 138:	f9 0b       	sbc	r31, r25
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 *    Funcao para escrita no display 7 segmentos
 *    Recebe 2 argumentos, o dígito a ser escrito e
 *    o display a ser escrito
 *
 ************************************************/
void WriteDisplays(int digit, short int displayNum) {
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	cd cf       	rjmp	.-102    	; 0xde <WriteDisplays+0x48>

00000144 <main>:
		++pin;
	}
}
int main(void)
{
	DDRD = 0b00101111;                    //pin 11 g of 7 segment bus led ---- D0,D1,D2,D3 - 7 segments control leds
 144:	8f e2       	ldi	r24, 0x2F	; 47
 146:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00111111;					  //pins 8 - 13: 7 segments bus leds
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	84 b9       	out	0x04, r24	; 4
										  //Os pinos de escrita no display foram (PORTB 0 a 5) e (PORTD 5) pois nem o PORTD nem o PORTB permitem
										  //acesso total ao usuario
	PORTD |= (1<<PD0);
 14c:	58 9a       	sbi	0x0b, 0	; 11
	PORTD |= (1<<PD1);
 14e:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= (1<<PD2);
 150:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD |= (1<<PD3);
 152:	5b 9a       	sbi	0x0b, 3	; 11
	
    while (1) 
    {
		WriteDisplays(5,0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 4b 00 	call	0x96	; 0x96 <WriteDisplays>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f e9       	ldi	r18, 0x9F	; 159
 162:	86 e8       	ldi	r24, 0x86	; 134
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x22>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x2c>
 170:	00 00       	nop
		_delay_ms(500);
		WriteDisplays(5,1);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <WriteDisplays>
 17e:	2f e9       	ldi	r18, 0x9F	; 159
 180:	86 e8       	ldi	r24, 0x86	; 134
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x40>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x4a>
 18e:	00 00       	nop
		_delay_ms(500);
		WriteDisplays(5,0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 4b 00 	call	0x96	; 0x96 <WriteDisplays>
 19c:	2f e9       	ldi	r18, 0x9F	; 159
 19e:	86 e8       	ldi	r24, 0x86	; 134
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x5e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x68>
 1ac:	00 00       	nop
		_delay_ms(500);
		WriteDisplays(5,1);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <WriteDisplays>
 1ba:	2f e9       	ldi	r18, 0x9F	; 159
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x7c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x86>
 1ca:	00 00       	nop
 1cc:	c3 cf       	rjmp	.-122    	; 0x154 <main+0x10>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
