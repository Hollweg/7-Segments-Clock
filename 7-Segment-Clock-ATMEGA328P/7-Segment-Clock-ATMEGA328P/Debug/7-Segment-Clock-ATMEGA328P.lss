
7-Segment-Clock-ATMEGA328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800146  00800146  000005dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7b  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a2  00000000  00000000  0000161f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000679  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000633  00000000  00000000  00002975  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  9e:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <WriteDisplays>:
					WriteDisplays(0,0);
					_delay_ms(25);
				}
		break;
	}
}//~~ end of CalculateSeconds
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	1b b8       	out	0x0b, r1	; 11
  aa:	95 b1       	in	r25, 0x05	; 5
  ac:	15 b8       	out	0x05, r1	; 5
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	15 b8       	out	0x05, r1	; 5
  b2:	61 11       	cpse	r22, r1
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <WriteDisplays+0x1c>
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	15 b8       	out	0x05, r1	; 5
  ba:	2b 9a       	sbi	0x05, 3	; 5
  bc:	2c 9a       	sbi	0x05, 4	; 5
  be:	2d 9a       	sbi	0x05, 5	; 5
  c0:	32 c0       	rjmp	.+100    	; 0x126 <WriteDisplays+0x80>
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	31 f4       	brne	.+12     	; 0xd2 <WriteDisplays+0x2c>
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	15 b8       	out	0x05, r1	; 5
  ca:	2a 9a       	sbi	0x05, 2	; 5
  cc:	2c 9a       	sbi	0x05, 4	; 5
  ce:	2d 9a       	sbi	0x05, 5	; 5
  d0:	2a c0       	rjmp	.+84     	; 0x126 <WriteDisplays+0x80>
  d2:	62 30       	cpi	r22, 0x02	; 2
  d4:	31 f4       	brne	.+12     	; 0xe2 <WriteDisplays+0x3c>
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	15 b8       	out	0x05, r1	; 5
  da:	2a 9a       	sbi	0x05, 2	; 5
  dc:	2b 9a       	sbi	0x05, 3	; 5
  de:	2d 9a       	sbi	0x05, 5	; 5
  e0:	22 c0       	rjmp	.+68     	; 0x126 <WriteDisplays+0x80>
  e2:	63 30       	cpi	r22, 0x03	; 3
  e4:	01 f5       	brne	.+64     	; 0x126 <WriteDisplays+0x80>
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	15 b8       	out	0x05, r1	; 5
  ea:	2a 9a       	sbi	0x05, 2	; 5
  ec:	2b 9a       	sbi	0x05, 3	; 5
  ee:	2c 9a       	sbi	0x05, 4	; 5
  f0:	1a c0       	rjmp	.+52     	; 0x126 <WriteDisplays+0x80>
  f2:	48 30       	cpi	r20, 0x08	; 8
  f4:	68 f4       	brcc	.+26     	; 0x110 <WriteDisplays+0x6a>
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	90 81       	ld	r25, Z
  fa:	29 2f       	mov	r18, r25
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	06 2e       	mov	r0, r22
 100:	02 c0       	rjmp	.+4      	; 0x106 <WriteDisplays+0x60>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <WriteDisplays+0x5c>
 10a:	28 2b       	or	r18, r24
 10c:	2b b9       	out	0x0b, r18	; 11
 10e:	04 c0       	rjmp	.+8      	; 0x118 <WriteDisplays+0x72>
 110:	95 b1       	in	r25, 0x05	; 5
 112:	80 81       	ld	r24, Z
 114:	89 2b       	or	r24, r25
 116:	85 b9       	out	0x05, r24	; 5
 118:	4f 5f       	subi	r20, 0xFF	; 255
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	49 30       	cpi	r20, 0x09	; 9
 122:	39 f7       	brne	.-50     	; 0xf2 <WriteDisplays+0x4c>
 124:	08 95       	ret
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	89 9f       	mul	r24, r25
 12a:	f0 01       	movw	r30, r0
 12c:	11 24       	eor	r1, r1
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	dc cf       	rjmp	.-72     	; 0xf2 <WriteDisplays+0x4c>

0000013a <CalculateMinutes>:
 *    It receives two arguments: the digit  
 *    and the display number to to be writed 
 *
 ************************************************/
void CalculateMinutes (bool time_display)
{
 13a:	cf 93       	push	r28
	switch (time_display){
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	09 f4       	brne	.+2      	; 0x142 <CalculateMinutes+0x8>
 140:	47 c0       	rjmp	.+142    	; 0x1d0 <CalculateMinutes+0x96>
		case 0:
				if (minutes/10 == 0 && minutes < 10){
 142:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	50 f4       	brcc	.+20     	; 0x15e <CalculateMinutes+0x24>
					WriteDisplays(0,1);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
					WriteDisplays(minutes, 0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 15c:	b5 c0       	rjmp	.+362    	; 0x2c8 <CalculateMinutes+0x18e>
				}
	
				else if (minutes%10 == 0){
 15e:	9d ec       	ldi	r25, 0xCD	; 205
 160:	89 9f       	mul	r24, r25
 162:	91 2d       	mov	r25, r1
 164:	11 24       	eor	r1, r1
 166:	96 95       	lsr	r25
 168:	96 95       	lsr	r25
 16a:	96 95       	lsr	r25
 16c:	99 0f       	add	r25, r25
 16e:	29 2f       	mov	r18, r25
 170:	22 0f       	add	r18, r18
 172:	22 0f       	add	r18, r18
 174:	92 0f       	add	r25, r18
 176:	89 13       	cpse	r24, r25
 178:	0f c0       	rjmp	.+30     	; 0x198 <CalculateMinutes+0x5e>
					WriteDisplays(minutes/10, 1);
 17a:	9d ec       	ldi	r25, 0xCD	; 205
 17c:	89 9f       	mul	r24, r25
 17e:	81 2d       	mov	r24, r1
 180:	11 24       	eor	r1, r1
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	86 95       	lsr	r24
 186:	86 95       	lsr	r24
 188:	86 95       	lsr	r24
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
					WriteDisplays(0,0);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 196:	98 c0       	rjmp	.+304    	; 0x2c8 <CalculateMinutes+0x18e>
				}
	
				else if (minutes%10 != 0){
					WriteDisplays(minutes/10, 1);
 198:	cd ec       	ldi	r28, 0xCD	; 205
 19a:	8c 9f       	mul	r24, r28
 19c:	81 2d       	mov	r24, r1
 19e:	11 24       	eor	r1, r1
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	86 95       	lsr	r24
 1a4:	86 95       	lsr	r24
 1a6:	86 95       	lsr	r24
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
					WriteDisplays(minutes%10,0);
 1ac:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 1b0:	8c 9f       	mul	r24, r28
 1b2:	c1 2d       	mov	r28, r1
 1b4:	11 24       	eor	r1, r1
 1b6:	c6 95       	lsr	r28
 1b8:	c6 95       	lsr	r28
 1ba:	c6 95       	lsr	r28
 1bc:	cc 0f       	add	r28, r28
 1be:	9c 2f       	mov	r25, r28
 1c0:	99 0f       	add	r25, r25
 1c2:	99 0f       	add	r25, r25
 1c4:	c9 0f       	add	r28, r25
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	8c 1b       	sub	r24, r28
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 1ce:	7c c0       	rjmp	.+248    	; 0x2c8 <CalculateMinutes+0x18e>
				}
		break;
		
		case 1:
				if (minutes/10 == 0 && minutes < 10){
 1d0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	e0 f4       	brcc	.+56     	; 0x210 <CalculateMinutes+0xd6>
					WriteDisplays(0,1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f e7       	ldi	r18, 0x7F	; 127
 1e2:	88 e3       	ldi	r24, 0x38	; 56
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <CalculateMinutes+0xac>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <CalculateMinutes+0xb6>
 1f0:	00 00       	nop
					_delay_ms(25);
					WriteDisplays(minutes, 0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 1fc:	2f e7       	ldi	r18, 0x7F	; 127
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <CalculateMinutes+0xc8>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <CalculateMinutes+0xd2>
 20c:	00 00       	nop
 20e:	5c c0       	rjmp	.+184    	; 0x2c8 <CalculateMinutes+0x18e>
					_delay_ms(25);
				}
				
				else if (minutes%10 == 0){
 210:	9d ec       	ldi	r25, 0xCD	; 205
 212:	89 9f       	mul	r24, r25
 214:	91 2d       	mov	r25, r1
 216:	11 24       	eor	r1, r1
 218:	96 95       	lsr	r25
 21a:	96 95       	lsr	r25
 21c:	96 95       	lsr	r25
 21e:	99 0f       	add	r25, r25
 220:	29 2f       	mov	r18, r25
 222:	22 0f       	add	r18, r18
 224:	22 0f       	add	r18, r18
 226:	92 0f       	add	r25, r18
 228:	89 13       	cpse	r24, r25
 22a:	21 c0       	rjmp	.+66     	; 0x26e <CalculateMinutes+0x134>
					WriteDisplays(minutes/10, 1);
 22c:	9d ec       	ldi	r25, 0xCD	; 205
 22e:	89 9f       	mul	r24, r25
 230:	81 2d       	mov	r24, r1
 232:	11 24       	eor	r1, r1
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	86 95       	lsr	r24
 238:	86 95       	lsr	r24
 23a:	86 95       	lsr	r24
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 240:	2f e7       	ldi	r18, 0x7F	; 127
 242:	88 e3       	ldi	r24, 0x38	; 56
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <CalculateMinutes+0x10c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <CalculateMinutes+0x116>
 250:	00 00       	nop
					_delay_ms(25);
					WriteDisplays(0,0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 25a:	2f e7       	ldi	r18, 0x7F	; 127
 25c:	88 e3       	ldi	r24, 0x38	; 56
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <CalculateMinutes+0x126>
 268:	00 c0       	rjmp	.+0      	; 0x26a <CalculateMinutes+0x130>
 26a:	00 00       	nop
 26c:	2d c0       	rjmp	.+90     	; 0x2c8 <CalculateMinutes+0x18e>
					_delay_ms(25);
				}
				
				else if (minutes%10 != 0){
					WriteDisplays(minutes/10, 1);
 26e:	cd ec       	ldi	r28, 0xCD	; 205
 270:	8c 9f       	mul	r24, r28
 272:	81 2d       	mov	r24, r1
 274:	11 24       	eor	r1, r1
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	86 95       	lsr	r24
 27a:	86 95       	lsr	r24
 27c:	86 95       	lsr	r24
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 282:	2f e7       	ldi	r18, 0x7F	; 127
 284:	88 e3       	ldi	r24, 0x38	; 56
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <CalculateMinutes+0x14e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <CalculateMinutes+0x158>
 292:	00 00       	nop
					_delay_ms(25);
					WriteDisplays(minutes%10,0);
 294:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 298:	8c 9f       	mul	r24, r28
 29a:	c1 2d       	mov	r28, r1
 29c:	11 24       	eor	r1, r1
 29e:	c6 95       	lsr	r28
 2a0:	c6 95       	lsr	r28
 2a2:	c6 95       	lsr	r28
 2a4:	cc 0f       	add	r28, r28
 2a6:	9c 2f       	mov	r25, r28
 2a8:	99 0f       	add	r25, r25
 2aa:	99 0f       	add	r25, r25
 2ac:	c9 0f       	add	r28, r25
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	8c 1b       	sub	r24, r28
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 2b6:	2f e7       	ldi	r18, 0x7F	; 127
 2b8:	88 e3       	ldi	r24, 0x38	; 56
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <CalculateMinutes+0x182>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <CalculateMinutes+0x18c>
 2c6:	00 00       	nop
					_delay_ms(25);
				}
		break;
	}	
}//~~ end of CalculateMinutes
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <CalculateHours>:
 *    and the display number to to be writed 
 *
 ************************************************/
void CalculateHours (bool time_display)
{
	switch (time_display){
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	29 f1       	breq	.+74     	; 0x31a <CalculateHours+0x4e>
		case 0:
				if (hour/10 == 0){
 2d0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	50 f4       	brcc	.+20     	; 0x2ec <CalculateHours+0x20>
					WriteDisplays(0,3);
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
					WriteDisplays(hour,2);
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 2e6:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 2ea:	08 95       	ret
				}
	
				else{
					WriteDisplays(1,3);	
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
					WriteDisplays(hour%10,2);	
 2f4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 2f8:	9d ec       	ldi	r25, 0xCD	; 205
 2fa:	89 9f       	mul	r24, r25
 2fc:	91 2d       	mov	r25, r1
 2fe:	11 24       	eor	r1, r1
 300:	96 95       	lsr	r25
 302:	96 95       	lsr	r25
 304:	96 95       	lsr	r25
 306:	99 0f       	add	r25, r25
 308:	29 2f       	mov	r18, r25
 30a:	22 0f       	add	r18, r18
 30c:	22 0f       	add	r18, r18
 30e:	92 0f       	add	r25, r18
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	89 1b       	sub	r24, r25
 314:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 318:	08 95       	ret
				}
		break;
		
		case 1:
				if (hour/10 == 0){
 31a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 31e:	8a 30       	cpi	r24, 0x0A	; 10
 320:	e0 f4       	brcc	.+56     	; 0x35a <CalculateHours+0x8e>
					WriteDisplays(0,3);
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	80 e7       	ldi	r24, 0x70	; 112
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <CalculateHours+0x64>
 338:	00 c0       	rjmp	.+0      	; 0x33a <CalculateHours+0x6e>
 33a:	00 00       	nop
					_delay_ms(50);
					WriteDisplays(hour,2);
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 342:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	80 e7       	ldi	r24, 0x70	; 112
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <CalculateHours+0x80>
 354:	00 c0       	rjmp	.+0      	; 0x356 <CalculateHours+0x8a>
 356:	00 00       	nop
 358:	08 95       	ret
					_delay_ms(50);
				}
				
				else{
					WriteDisplays(1,3);
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	80 e7       	ldi	r24, 0x70	; 112
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <CalculateHours+0x9c>
 370:	00 c0       	rjmp	.+0      	; 0x372 <CalculateHours+0xa6>
 372:	00 00       	nop
					_delay_ms(50);
					WriteDisplays(hour%10,2);
 374:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 378:	9d ec       	ldi	r25, 0xCD	; 205
 37a:	89 9f       	mul	r24, r25
 37c:	91 2d       	mov	r25, r1
 37e:	11 24       	eor	r1, r1
 380:	96 95       	lsr	r25
 382:	96 95       	lsr	r25
 384:	96 95       	lsr	r25
 386:	99 0f       	add	r25, r25
 388:	29 2f       	mov	r18, r25
 38a:	22 0f       	add	r18, r18
 38c:	22 0f       	add	r18, r18
 38e:	92 0f       	add	r25, r18
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	89 1b       	sub	r24, r25
 394:	0e 94 53 00 	call	0xa6	; 0xa6 <WriteDisplays>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	80 e7       	ldi	r24, 0x70	; 112
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <CalculateHours+0xd2>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <CalculateHours+0xdc>
 3a8:	00 00       	nop
 3aa:	08 95       	ret

000003ac <InitADC>:
 * 
 *
 ************************************************/
void InitADC ()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);		// ADEN: Set to turn on ADC , by default it is turned off
 3ac:	85 e8       	ldi	r24, 0x85	; 133
 3ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX = 0x00 | (1<<REFS0);							//ADPS2: ADPS2 and ADPS0 set to make division factor 32
 3b2:	80 e4       	ldi	r24, 0x40	; 64
 3b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 3b8:	08 95       	ret

000003ba <ReadADC>:
 ************************************************/
uint16_t ReadADC (uint8_t channel)
{
	uint16_t adc_value;

	ADMUX &= 0xF0;                    			//Clear the older channel that was read
 3ba:	ec e7       	ldi	r30, 0x7C	; 124
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	90 81       	ld	r25, Z
 3c0:	90 7f       	andi	r25, 0xF0	; 240
 3c2:	90 83       	st	Z, r25
	ADMUX = channel | (1<<REFS0);				// ADC input channel set to channel and Vref <- AVcc
 3c4:	80 64       	ori	r24, 0x40	; 64
 3c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);						// Start conversion
 3c8:	ea e7       	ldi	r30, 0x7A	; 122
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));					// wait for conversion to complete
 3d2:	80 81       	ld	r24, Z
 3d4:	86 fd       	sbrc	r24, 6
 3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <ReadADC+0x18>
	
	adc_value = ADCW;							//Store ADC value
 3d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adc_value;
}//~~ end of ReadADC
 3e0:	08 95       	ret

000003e2 <main>:
int main(void)
{
	uint8_t pin, digit;
	uint16_t adc_value;
										  //Data Direction Register: 1 - output    0 - input
	DDRD = 0b11111100;                    //7 segments bus control: PORTB(2,3,4,5)
 3e2:	8c ef       	ldi	r24, 0xFC	; 252
 3e4:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00111111;					  //7 segments multiplexed leds: Arduino UNO pins 2 - 7: PORTD(2,3,4,5,6,7) and 8: PORTB0
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	84 b9       	out	0x04, r24	; 4
										  //Arduino pin 9: PB1 --- white LED 
	PORTB |= (0<<PB2);
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PB3);
 3ee:	2b 9a       	sbi	0x05, 3	; 5
	PORTB |= (1<<PB4);
 3f0:	2c 9a       	sbi	0x05, 4	; 5
	PORTB |= (1<<PB5);
 3f2:	2d 9a       	sbi	0x05, 5	; 5
	
	InitADC();
 3f4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <InitADC>
	
	OCR1A = 0x3D08;							//Timer definitions
 3f8:	88 e0       	ldi	r24, 0x08	; 8
 3fa:	9d e3       	ldi	r25, 0x3D	; 61
 3fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 400:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12); 				// Mode 4, CTC on OCR1A
 404:	e1 e8       	ldi	r30, 0x81	; 129
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	88 60       	ori	r24, 0x08	; 8
 40c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);   				//Set interrupt on compare match
 40e:	af e6       	ldi	r26, 0x6F	; 111
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	8c 91       	ld	r24, X
 414:	82 60       	ori	r24, 0x02	; 2
 416:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12) | (1 << CS10);  	// set prescaler to 1024 and start the timer
 418:	80 81       	ld	r24, Z
 41a:	85 60       	ori	r24, 0x05	; 5
 41c:	80 83       	st	Z, r24
	sei();									// enable interrupts
 41e:	78 94       	sei
	
	PORT_OFF(PORTB,1);
 420:	29 98       	cbi	0x05, 1	; 5
			CalculateMinutes(1);
			CalculateHours(1);
			sei();
		}*/
		
		adc_value = ReadADC(1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ReadADC>
		if (adc_value > 750) {
 428:	8f 3e       	cpi	r24, 0xEF	; 239
 42a:	92 40       	sbci	r25, 0x02	; 2
 42c:	e0 f0       	brcs	.+56     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			cli();
 42e:	f8 94       	cli
			minutes += 1;
 430:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <minutes>
			
			if (minutes > 59){
 43a:	8c 33       	cpi	r24, 0x3C	; 60
 43c:	38 f0       	brcs	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				hour += 1;
 43e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <hour>
				minutes = 0;
 448:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <minutes>
			}
					
			if (hour > 11){
 44c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 450:	8c 30       	cpi	r24, 0x0C	; 12
 452:	10 f0       	brcs	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				hour = 0;
 454:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <hour>
			}

			//CalculateSeconds(1);
			CalculateMinutes(1);
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 9d 00 	call	0x13a	; 0x13a <CalculateMinutes>
			CalculateHours(1);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 66 01 	call	0x2cc	; 0x2cc <CalculateHours>
			sei();
 464:	78 94       	sei
		}
		
		adc_value = ReadADC(2);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ReadADC>
		if (adc_value > 750) {
 46c:	8f 3e       	cpi	r24, 0xEF	; 239
 46e:	92 40       	sbci	r25, 0x02	; 2
 470:	90 f0       	brcs	.+36     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			cli();	
 472:	f8 94       	cli
			hour += 1;
 474:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 478:	8f 5f       	subi	r24, 0xFF	; 255
							
			if (hour > 11){
 47a:	8c 30       	cpi	r24, 0x0C	; 12
 47c:	18 f4       	brcc	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
		
		adc_value = ReadADC(2);
		if (adc_value > 750) {
			cli();	
			hour += 1;
 47e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <hour>
 482:	02 c0       	rjmp	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
							
			if (hour > 11){
				hour = 0;
 484:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <hour>
			}
			
			//CalculateSeconds(1);
			CalculateMinutes(1);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 9d 00 	call	0x13a	; 0x13a <CalculateMinutes>
			CalculateHours(1);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 66 01 	call	0x2cc	; 0x2cc <CalculateHours>
			sei();
 494:	78 94       	sei
		}
		
		//CalculateSeconds(0);
		CalculateMinutes(0);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 9d 00 	call	0x13a	; 0x13a <CalculateMinutes>
		CalculateHours(0);
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 66 01 	call	0x2cc	; 0x2cc <CalculateHours>
	}
 4a2:	bf cf       	rjmp	.-130    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

000004a4 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	8f 93       	push	r24
	//action to be done every 1 sec
	
		if (seconds > 59){
 4b0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 4b4:	8c 33       	cpi	r24, 0x3C	; 60
 4b6:	38 f0       	brcs	.+14     	; 0x4c6 <__vector_11+0x22>
			minutes += 1;
 4b8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <minutes>
			seconds = 0;
 4c2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
		}
		
		if (minutes > 59){
 4c6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <minutes>
 4ca:	8c 33       	cpi	r24, 0x3C	; 60
 4cc:	38 f0       	brcs	.+14     	; 0x4dc <__vector_11+0x38>
			hour += 1;
 4ce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <hour>
			minutes = 0;
 4d8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <minutes>
		}
		
		if (hour > 11){
 4dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <hour>
 4e0:	8c 30       	cpi	r24, 0x0C	; 12
 4e2:	10 f0       	brcs	.+4      	; 0x4e8 <__vector_11+0x44>
			hour = 0;
 4e4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <hour>
		}
		seconds += 1;
 4e8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
}//~~ end of interruption
 4f2:	8f 91       	pop	r24
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
